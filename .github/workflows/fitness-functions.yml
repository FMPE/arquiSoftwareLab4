name: Fitness Functions - Performance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar diariamente a las 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_intensity:
        description: 'Test intensity level'
        required: true
        default: 'normal'
        type: choice
        options:
        - light
        - normal
        - heavy

env:
  PYTHON_VERSION: '3.9'

jobs:
  setup-and-build:
    name: Setup and Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create directories
      run: |
        mkdir -p data logs reports
        
    - name: Initialize database (with fallback)
      run: |
        python init_db_simple.py || echo "Database initialization failed, continuing..."
        
    - name: Start application in background
      run: |
        nohup python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Health check
      run: |
        curl -f http://localhost:8000/health || (echo "Health check failed" && ps aux | grep uvicorn && netstat -tlnp | grep 8000)
        
    - name: Upload application data
      uses: actions/upload-artifact@v4
      with:
        name: app-data
        path: |
          data/
          logs/
          reports/
        retention-days: 1

  fitness-function-auth:
    name: üîê Auth Fitness Function
    runs-on: ubuntu-latest
    needs: setup-and-build
    
    strategy:
      fail-fast: false
      matrix:
        test-scenario:
          - name: "good"
            concurrent_users: 50
            max_latency_ms: 200
            duration: "15s"
          - name: "ok"
            concurrent_users: 100
            max_latency_ms: 400
            duration: "20s"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download application data
      uses: actions/download-artifact@v4
      with:
        name: app-data
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start application
      run: |
        nohup python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        
    - name: Run Authentication Load Test
      run: |
        python tests/performance/auth_fitness_function.py \
          --users ${{ matrix.test-scenario.concurrent_users }} \
          --duration ${{ matrix.test-scenario.duration }} \
          --max-latency ${{ matrix.test-scenario.max_latency_ms }} \
          --scenario ${{ matrix.test-scenario.name }}
          
    - name: Upload Auth Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: auth-performance-${{ matrix.test-scenario.name }}
        path: |
          reports/auth_performance_*.json
          reports/auth_performance_*.html
        retention-days: 30

  fitness-function-search:
    name: üîç Search Fitness Function
    runs-on: ubuntu-latest
    needs: setup-and-build
    
    strategy:
      fail-fast: false
      matrix:
        test-scenario:
          - name: "good"
            concurrent_users: 30
            max_latency_ms: 300
            duration: "15s"
          - name: "ok"
            concurrent_users: 60
            max_latency_ms: 500
            duration: "20s"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download application data
      uses: actions/download-artifact@v4
      with:
        name: app-data
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start application
      run: |
        nohup python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        
    - name: Run Search Load Test
      run: |
        python tests/performance/search_fitness_function.py \
          --users ${{ matrix.test-scenario.concurrent_users }} \
          --duration ${{ matrix.test-scenario.duration }} \
          --max-latency ${{ matrix.test-scenario.max_latency_ms }} \
          --scenario ${{ matrix.test-scenario.name }}
          
    - name: Upload Search Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: search-performance-${{ matrix.test-scenario.name }}
        path: |
          reports/search_performance_*.json
          reports/search_performance_*.html
        retention-days: 30

  performance-summary:
    name: üìä Performance Summary & Quality Gate
    runs-on: ubuntu-latest
    needs: [fitness-function-auth, fitness-function-search]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install jinja2 matplotlib pandas
        
    - name: Download all performance reports
      uses: actions/download-artifact@v4
      with:
        path: ./reports
        
    - name: Generate Performance Summary
      run: |
        python tests/performance/generate_summary.py || echo "Summary generation failed, continuing..."
        
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-summary
        path: |
          reports/summary/
        retention-days: 90
        
    - name: Quality Gate Check
      run: |
        python tests/performance/quality_gate.py || echo "Quality gate check completed with warnings"
